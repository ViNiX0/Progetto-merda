import random
import matplotlib.pyplot as plt
import numpy as np
import math
#dati forniti dal problema:
l = 2.2 #distanza radiale oltre la quale la fiamma non scioglie la cera
k = 1 / 1350
d = 0.29
w_inf = 0.5
a = 1.05
b = 5.2*10**(-5)
ki = 7.4*10**(-4)
j = ja = 7.15*10**(-4)
n = 0.723
def f(x,l,ki,d): #questa Ã¨ R(t)

    return l-(l-d)*math.exp(-ki*x)

def box_muller(a, b):
    u1 = random.random()
    u2 = random.random()

    z0 = math.sqrt(-2.0 * math.log(u1)) * math.cos(2 * math.pi * u2)
    z1 = math.sqrt(-2.0 * math.log(u1)) * math.sin(2 * math.pi * u2)

    # Trasformazione lineare per ottenere la variabile casuale uniformemente distribuita nell'intervallo [a, b]
    x_uniform = a + (z0 + 1) * (b - a) / 2

    return x_uniform


def monte_carlo_simulation(f, a, b, num_samples):

    x_values = [random.uniform(a,b) for _ in range(num_samples)]  # Genera punti casuali in [a, b]
    y_values = [f(x,l,k,d) for x in x_values]  # Calcola i valori della funzione nei punti generati
    return x_values, y_values

# Intervallo di simulazione
a = 0
b = 6000

# Numero di campioni per il metodo Monte Carlo
num_samples = 15

# Simulare i dati utilizzando il metodo Monte Carlo
x_values, y_values = monte_carlo_simulation(f, a, b, num_samples)
print(x_values)

# Graficare i dati simulati
plt.scatter(x_values, y_values, label='Dati simulati')
plt.xlabel('t(s)')
plt.ylabel('R(t) (cm)')
plt.title('Raggio del pozzo in funzione del tempo')
plt.legend()
plt.show()


# fai un fit in caso
